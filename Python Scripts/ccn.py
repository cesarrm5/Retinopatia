# -*- coding: utf-8 -*-
"""CCN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNmMsD-3HhTXITUd8wQnMy4uq2JK9CE7
"""

import keras
from tensorflow.keras.utils import to_categorical
import numpy as np 
import matplotlib.pyplot as plt
print('keras version', keras.__version__)

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import cv2 
import glob 
import matplotlib.pyplot as plt
from PIL import Image

import tensorflow as tf
import numpy as np
import pandas as pd

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

a= !ls "/content/drive/MyDrive/DiabeticRetinopathy"
tipo= type (a[0])
#train=a[0].split() 
vector = []
for i in a:
  vector= vector+(i.split())
print (vector)
for i in vector:
  escala_grises = [i]
  #imagen = cv2.imread("/content/drive/MyDrive/DiabeticRetinopathy/10_left.jpeg",0)
  #imagen = cv2.imwrite("/content/drive/MyDrive/DiabeticRetinopathy/grayscale/10_left.jpg",imagen)
  print(i)
  imagen = cv2.imread("/content/drive/MyDrive/DiabeticRetinopathy/"+i,0)
  imagen = cv2.imwrite("/content/drive/MyDrive/grayscale/imagen"+i,imagen)
  #print(imagen)

listanombres = vector

listanombres = vector

imagenes= !ls "/content/drive/MyDrive/DiabeticRetinopathy"
etiquetas = []
resultado = []
vector = []
for i in imagenes:
  vector= vector+(i.split())
print (vector)

#resultado = np.zeros([int(len(vector)/1),1051, 1024])

#contador = 0
for i in vector[:int(len(vector)/1)]:
  
  print(i)
  imagen = cv2.imread("/content/drive/MyDrive/grayscale/imagen"+i,0)
  tam = imagen.shape
  #resultado[contador,:tam[0],:tam[1]] = imagen
  resultado= resultado+[imagen]
  #contador = contador + 1
print(len(resultado))

print(resultado[450])

imagen = cv2.imread("/content/drive/MyDrive/retinopatias/grayscale/"+i,0)

etiquetas = pd.read_csv("/content/drive/MyDrive/etiquetas/trainLabels_cropped.csv")
print(etiquetas)
etiquetas ["image"] [384]

niveles = etiquetas["level"]
busqueda = etiquetas["image"]
print(type(busqueda))
busqueda[busqueda=="438_right"].index[0]

vector [383][0:-5]

#barrido de vector 
#quitar la extencion
#preguntar en que indice de busqueda esta el nombre de la imagen 
#consultar el indice 
#meter a la lista el indice

resul= []
for i in listanombres[:int(len(vector)/1)]:
  recorrer = i[0:-5]
  print(recorrer)
  indice= busqueda[busqueda==recorrer].index[0]
  print(indice)
  nivel = niveles[indice]
  print(nivel)
  resul.append(nivel)

print(resul)

print(vector)

print(busqueda)

#with open ("labels.pickle", "wb") as f:
  #pickle.dump(resul, f)

#entrenar neurona
train = np.array(resultado)
labels = np.array(resul)

mostrar = plt.imshow(train[1])
print(labels[1])

# Dividir los datos en entrenamiento (70%) y validaci√≥n (30%)
np.random.seed(100)

indices = np.random.permutation(train.shape[0])

valid_cnt = int(train.shape[0] * 0.3)

test_idx, training_idx = indices[:valid_cnt],\
                         indices[valid_cnt:]
  
test, train = train[test_idx,:],\
              train[training_idx,:]
  
onehot_test, onehot_train = onehot[test_idx,:],\
                        onehot[training_idx,:]
train=train.reshape([-1,train.shape[1],train.shape[2],1])
test=test.reshape([-1,test.shape[1],test.shape[2],1])

print('Forma de datos de Entrenamiento=', train.shape , '\nForma de datos de Test=', test.shape)

train.shape
train[0].shape
type(train)